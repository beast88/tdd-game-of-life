{"version":3,"sources":["components/Header.tsx","components/About.tsx","Cells/CellState.ts","Cells/Cell.ts","Game/Game.ts","components/Game.tsx","components/Landing.tsx","App.tsx","index.tsx"],"names":["Header","props","className","href","target","rel","onClick","e","openAbout","About","closeAbout","cellState","Cell","state","Error","this","neighbors","Game","row","column","result","forEach","gameRow","rowNum","cell","colNum","map","getNextState","getLiveNeighbors","GameBoard","interval","useState","game","setGame","isLive","setIsLive","getNextGameState","newState","nextState","next","useEffect","grid","Array","from","number","fill","newGame","setTimeout","style","background","undefined","col","newGrid","gridRow","changeCellState","clearTimeout","Landing","error","setError","isNaN","type","value","onChange","handleChange","disabled","handleSubmit","App","showAbout","setShowAbout","showLanding","setShowLanding","setNumber","i","parseInt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.045e6f48.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ninterface Props {\r\n  openAbout(): void;\r\n}\r\n\r\nconst Header: React.FC<Props> = (props) => {\r\n  return (\r\n    <header>\r\n      <ul className=\"header-info\">\r\n        <li>\r\n          <a\r\n            href=\"https://github.com/beast88/tdd-game-of-life\"\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            <i className=\"fab fa-github\"></i>\r\n          </a>\r\n        </li>\r\n        <li>Conway's Game of Life</li>\r\n        <li\r\n          className=\"about-link\"\r\n          onClick={(e) => {\r\n            props.openAbout();\r\n          }}\r\n        >\r\n          About\r\n        </li>\r\n      </ul>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n  closeAbout(): void;\r\n}\r\n\r\nconst About: React.FC<Props> = (props) => {\r\n  return (\r\n    <div className=\"about-container\" onClick={() => props.closeAbout()}>\r\n      <section className=\"about-section\">\r\n        <button>\r\n          <i className=\"far fa-times-circle\"></i>\r\n        </button>\r\n\r\n        <h2>Conway's Game of Life</h2>\r\n        <p>\r\n          The Game of Life is a zero player game. How it progresses is\r\n          determined by the inital state of the game.{' '}\r\n          <a\r\n            href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\"\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            Here's the wiki article.\r\n          </a>\r\n        </p>\r\n\r\n        <h3>How To Play</h3>\r\n        <p>\r\n          Select the size of the grid you want to play with. Then select cells\r\n          to bring them to life. You can select as many cells as you wish. Once\r\n          you're ready click the start button to begin the simulation. How long\r\n          will your cells live?\r\n        </p>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","interface CellStateInterface {\r\n  ALIVE: number;\r\n  DEAD: number;\r\n}\r\n\r\nexport const cellState: CellStateInterface = {\r\n  ALIVE: 1,\r\n  DEAD: 0,\r\n};\r\n","import { cellState } from './CellState';\r\n\r\nexport interface CellInterface {\r\n  state: number;\r\n  getNextState(neighbors: number): number;\r\n}\r\n\r\nexport class Cell implements CellInterface {\r\n  state: number;\r\n\r\n  constructor(state: number) {\r\n    if (state !== cellState.ALIVE && state !== cellState.DEAD) {\r\n      throw new Error('Invalid State');\r\n    }\r\n    this.state = state;\r\n  }\r\n\r\n  getNextState(neighbors: number): number {\r\n    if (this.state === cellState.ALIVE) {\r\n      if (neighbors === 2 || neighbors === 3) {\r\n        return this.state;\r\n      }\r\n      return cellState.DEAD;\r\n    } else if (this.state === cellState.DEAD) {\r\n      if (neighbors === 3) {\r\n        return cellState.ALIVE;\r\n      }\r\n    }\r\n    return this.state;\r\n  }\r\n}\r\n","import { Cell, CellInterface } from '../Cells/Cell';\r\n\r\nexport default class Game {\r\n  state: Array<Array<CellInterface>>;\r\n\r\n  constructor(state: Array<Array<CellInterface>>) {\r\n    this.state = state;\r\n  }\r\n\r\n  getLiveNeighbors(row: number, column: number): number {\r\n    let result = 0;\r\n\r\n    this.state.forEach((gameRow, rowNum) => {\r\n      gameRow.forEach((cell, colNum) => {\r\n        if (\r\n          //Neighbors Above\r\n          (colNum === column - 1 && rowNum === row - 1) ||\r\n          (colNum === column && rowNum === row - 1) ||\r\n          (colNum === column + 1 && rowNum === row - 1) ||\r\n          //Neighbors to the sides\r\n          (colNum === column - 1 && rowNum === row) ||\r\n          (colNum === column + 1 && rowNum === row) ||\r\n          //Neighbors below\r\n          (colNum === column - 1 && rowNum === row + 1) ||\r\n          (colNum === column && rowNum === row + 1) ||\r\n          (colNum === column + 1 && rowNum === row + 1)\r\n        ) {\r\n          result += cell.state;\r\n        }\r\n      });\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  nextState() {\r\n    return this.state.map((row, rowNum) => {\r\n      return row.map((cell, colNum) => {\r\n        return new Cell(\r\n          cell.getNextState(this.getLiveNeighbors(rowNum, colNum))\r\n        );\r\n      });\r\n    });\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport Game from '../Game/Game';\r\nimport { cellState } from '../Cells/CellState';\r\nimport { Cell } from '../Cells/Cell';\r\n\r\ninterface Props {\r\n  number: number;\r\n}\r\n\r\nconst GameBoard: React.FC<Props> = (props) => {\r\n  const [game, setGame] = useState<Game>(\r\n    new Game([[new Cell(cellState.DEAD)]])\r\n  );\r\n  const [isLive, setIsLive] = useState<boolean>(false);\r\n\r\n  const getNextGameState = () => {\r\n    const newState = game.nextState();\r\n    const next = new Game(newState);\r\n    setGame(next);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const grid = Array.from(Array(props.number), () =>\r\n      Array(props.number).fill(cellState.DEAD)\r\n    );\r\n\r\n    const newGame = new Game(grid);\r\n    setGame(newGame);\r\n  }, [props.number]);\r\n\r\n  let interval: any;\r\n\r\n  useEffect(() => {\r\n    if (isLive) {\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n      interval = setTimeout(() => {\r\n        getNextGameState();\r\n      }, 750);\r\n    }\r\n  }, [game, isLive]);\r\n\r\n  const changeCellState = (row: number, col: number) => {\r\n    const newGrid = game.state.map((gridRow, rowNum) => {\r\n      return gridRow.map((cell, colNum) => {\r\n        if (rowNum === row && colNum === col) {\r\n          return cell.state === cellState.DEAD\r\n            ? new Cell(cellState.ALIVE)\r\n            : new Cell(cellState.DEAD);\r\n        }\r\n        return cell.state === cellState.ALIVE\r\n          ? new Cell(cellState.ALIVE)\r\n          : new Cell(cellState.DEAD);\r\n      });\r\n    });\r\n\r\n    const newGame = new Game(newGrid);\r\n\r\n    setGame(newGame);\r\n  };\r\n\r\n  const handleStart = () => {\r\n    setIsLive(true);\r\n    getNextGameState();\r\n  };\r\n\r\n  const handleStop = () => {\r\n    setIsLive(false);\r\n    clearTimeout(interval);\r\n  };\r\n\r\n  return (\r\n    <section className=\"game\">\r\n      <table>\r\n        <tbody>\r\n          {game.state.map((row, rowNum) => {\r\n            return (\r\n              <tr key={rowNum}>\r\n                {row.map((cell, colNum) => {\r\n                  return (\r\n                    <td\r\n                      key={colNum}\r\n                      className=\"cell\"\r\n                      style={{\r\n                        background:\r\n                          cell.state === cellState.ALIVE\r\n                            ? 'black'\r\n                            : 'transparent',\r\n                      }}\r\n                      onClick={\r\n                        !isLive\r\n                          ? () => {\r\n                              changeCellState(rowNum, colNum);\r\n                            }\r\n                          : undefined\r\n                      }\r\n                    ></td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      {isLive ? (\r\n        <button\r\n          className=\"button\"\r\n          onClick={() => {\r\n            handleStop();\r\n          }}\r\n        >\r\n          Stop\r\n        </button>\r\n      ) : (\r\n        <button\r\n          className=\"button\"\r\n          onClick={() => {\r\n            handleStart();\r\n          }}\r\n        >\r\n          Start\r\n        </button>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\ninterface Props {\r\n  number: number;\r\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  handleSubmit(): void;\r\n}\r\n\r\nconst Landing: React.FC<Props> = (props) => {\r\n  const [error, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (props.number < 5 || props.number > 20 || isNaN(props.number)) {\r\n      setError(true);\r\n    } else {\r\n      setError(false);\r\n    }\r\n  }, [props.number]);\r\n\r\n  return (\r\n    <div className=\"landing\">\r\n      <form className=\"setup\">\r\n        <label>Enter a grid number between 5 and 20</label>\r\n        <div className=\"form-control\">\r\n          <input\r\n            className=\"input\"\r\n            type=\"number\"\r\n            value={props.number}\r\n            onChange={(e) => props.handleChange(e)}\r\n          />\r\n        </div>\r\n        <div className=\"form-control\">\r\n          <button\r\n            disabled={error}\r\n            className=\"button\"\r\n            onClick={() => {\r\n              props.handleSubmit();\r\n            }}\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n        <p>\r\n          For mobile devices it is recommended that you use a low grid number\r\n        </p>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Landing;\r\n","import React, { useState } from 'react';\nimport Header from './components/Header';\nimport About from './components/About';\nimport GameBoard from './components/Game';\nimport Landing from './components/Landing';\n\nimport './styles/app.css';\n\nfunction App() {\n  const [showAbout, setShowAbout] = useState(false);\n  const [showLanding, setShowLanding] = useState(true);\n  const [number, setNumber] = useState(0);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const i = parseInt(e.target.value);\n    setNumber(i);\n  };\n\n  const handleSubmit = () => {\n    setShowLanding(false);\n  };\n\n  const openAbout = () => {\n    setShowAbout(true);\n  };\n\n  const closeAbout = () => {\n    setShowAbout(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <Header openAbout={openAbout} />\n\n      {showLanding ? (\n        <Landing\n          number={number}\n          handleChange={handleChange}\n          handleSubmit={handleSubmit}\n        />\n      ) : (\n        <GameBoard number={number} />\n      )}\n\n      {showAbout ? <About closeAbout={closeAbout} /> : ''}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}